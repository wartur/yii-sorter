<?php

/**
 * SorterActiveRecordBehaviorStdTest class file.
 *
 * @author		Krivtsov Artur (wartur) <gwartur@gmail.com> | Made in Russia
 * @copyright	Krivtsov Artur © 2014
 * @link		http://github.com/wartur/yii-sorter
 * @license		http://wartur.ru/license
 */

/**
 * SorterActiveRecordBehaviorStdTest
 * 
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-10 at 11:23:59.
 */
class SorterActiveRecordBehaviorStdTest extends CDbTestCase {
	
	/**
	 * @var string model name
	 */
	private static $className = 'SortestStd';

	// =========================================================================
	// fixturesschema

	/**
	 * This method is called before the first test of this test class is run.
	 *
	 * @since Method available since Release 3.4.0
	 */
	public static function setUpBeforeClass() {
		parent::setUpBeforeClass();

		// 
		$testdataPath = Yii::getPathOfAlias('sorter.tests.env.testdata');
		$createTableSql = file_get_contents($testdataPath . '/'. self::$className .'.sql');
		Yii::app()->db->createCommand($createTableSql)->execute();
		
		// импортим к фреймворку классы
		Yii::import('sorter.tests.env.models.*');
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		parent::setUp();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		parent::tearDown();
	}

	/**
	 * This method is called after the last test of this test class is run.
	 *
	 * @since Method available since Release 3.4.0
	 */
	public static function tearDownAfterClass() {
		parent::tearDownAfterClass();
	}

	// =========================================================================
	// tools

	/**
	 * fast extract id from CAcriveRecord array
	 * @param CAcriveRecord[] $param active records array
	 * @return array ids
	 */
	private static function extractIds(array $param) {
		$result = array();
		foreach ($param as $entry) {
			$result[] = $entry->id;
		}
		return $result;
	}
	
	/**
	 * @param int $id
	 * @return SorterActiveRecordBehavior
	 */
	public static function loadModel($id) {
		$className = self::$className;
		return $className::model()->findByPk($id);
	}
	
	/**
	 * @param array $conditions
	 * @return SorterActiveRecordBehavior
	 */
	public static function loadModelByConditions(array $conditions) {
		$className = self::$className;
		return $className::model()->find($conditions);
	}
	
	/**
	 * @return SorterActiveRecordBehavior
	 */
	public static function createModel() {
		return new self::$className();
	}

	// =========================================================================
	// tests

	/**
	 * @covers SorterActiveRecordBehavior::sorterMathMaxSortField
	 * @todo   Implement testSorterMathMaxSortField().
	 */
	public function testSorterMathMaxSortField() {
		$model = self::createModel();
		
		$this->assertEquals(2147483647, $model->sorterMathMaxSortField());
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterPrimaryKeyName
	 * @todo   Implement testSorterPrimaryKeyName().
	 */
	public function testSorterPrimaryKeyName() {
		$model = self::createModel();
		
		$this->assertEquals('id', $model->sorterPrimaryKeyName());
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterRealSpaceNatural
	 * @todo   Implement testSorterRealSpaceNatural().
	 */
	public function testSorterRealSpaceNatural() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMaxCountOfRecord
	 * @todo   Implement testSorterMaxCountOfRecord().
	 */
	public function testSorterMaxCountOfRecord() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterFindNewFreeSortSpaceBitSizeByCount
	 * @todo   Implement testSorterFindNewFreeSortSpaceBitSizeByCount().
	 */
	public function testSorterFindNewFreeSortSpaceBitSizeByCount() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterFindNewFreeSortSpaceBitSizeByDiff
	 * @todo   Implement testSorterFindNewFreeSortSpaceBitSizeByDiff().
	 */
	public function testSorterFindNewFreeSortSpaceBitSizeByDiff() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCentralWeightFirstElement
	 * @todo   Implement testSorterCentralWeightFirstElement().
	 */
	public function testSorterCentralWeightFirstElement() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @todo   Implement testSorterSwappWith().
	 */
	public function testSorterSwappWith() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveUp
	 * @todo   Implement testSorterCurrentMoveUp().
	 */
	public function testSorterCurrentMoveUp() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveDown
	 * @todo   Implement testSorterCurrentMoveDown().
	 */
	public function testSorterCurrentMoveDown() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveToBegin
	 * @todo   Implement testSorterCurrentMoveToBegin().
	 */
	public function testSorterCurrentMoveToBegin() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveToEnd
	 * @todo   Implement testSorterCurrentMoveToEnd().
	 */
	public function testSorterCurrentMoveToEnd() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveUpNumber
	 * @todo   Implement testSorterCurrentMoveUpNumber().
	 */
	public function testSorterCurrentMoveUpNumber() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveDownNumber
	 * @todo   Implement testSorterCurrentMoveDownNumber().
	 */
	public function testSorterCurrentMoveDownNumber() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveAfter
	 * @todo   Implement testSorterCurrentMoveAfter().
	 */
	public function testSorterCurrentMoveAfter() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveBefore
	 * @todo   Implement testSorterCurrentMoveBefore().
	 */
	public function testSorterCurrentMoveBefore() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveToPositionBefore
	 * @todo   Implement testSorterCurrentMoveToPositionBefore().
	 */
	public function testSorterCurrentMoveToPositionBefore() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterCurrentMoveToPositionAfter
	 * @todo   Implement testSorterCurrentMoveToPositionAfter().
	 */
	public function testSorterCurrentMoveToPositionAfter() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterChangeIdsOrderTo
	 * @todo   Implement testSorterChangeIdsOrderTo().
	 */
	public function testSorterChangeIdsOrderTo() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterInverseAll
	 * @todo   Implement testSorterInverseAll().
	 */
	public function testSorterInverseAll() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterNormalizeSortFieldRegular
	 * @todo   Implement testSorterNormalizeSortFieldRegular().
	 */
	public function testSorterNormalizeSortFieldRegular() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterSetNextInsertSortValue
	 * @todo   Implement testSorterSetNextInsertSortValue().
	 */
	public function testSorterSetNextInsertSortValue() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::beforeValidate
	 * @todo   Implement testBeforeValidate().
	 */
	public function testBeforeValidate() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers SorterActiveRecordBehavior::afterConstruct
	 * @todo   Implement testAfterConstruct().
	 */
	public function testAfterConstruct() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}
