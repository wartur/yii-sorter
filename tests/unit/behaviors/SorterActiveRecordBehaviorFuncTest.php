<?php

/**
 * SorterActiveRecordBehaviorStdTest class file.
 *
 * @author		Krivtsov Artur (wartur) <gwartur@gmail.com> http://wartur.ru | Made in Russia
 * @copyright	Krivtsov Artur Â© 2014
 * @link		https://github.com/wartur/yii-sorter
 * @license		https://github.com/wartur/yii-sorter/blob/master/LICENSE
 */

/**
 * SorterActiveRecordBehaviorStdTest
 * 
 * This test for functionality
 * 
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-10 at 11:23:59.
 */
class SorterActiveRecordBehaviorFuncTest extends CDbTestCase {

	/**
	 * @var string model name
	 */
	private static $className = 'SortestStd';

	// =========================================================================
	// fixturesschema

	/**
	 * This method is called before the first test of this test class is run.
	 *
	 * @since Method available since Release 3.4.0
	 */
	public static function setUpBeforeClass() {
		parent::setUpBeforeClass();

		// loading the database schema
		$testdataPath = Yii::getPathOfAlias('sorter.tests.env.testdata');
		$createTableSql = file_get_contents($testdataPath . '/' . self::$className . '.sql');
		Yii::app()->db->createCommand($createTableSql)->execute();

		// import models
		Yii::import('sorter.tests.env.models.*');
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		// load fixture
		$testdataPath = Yii::getPathOfAlias('sorter.tests.env.testdata');
		$createTableSql = file_get_contents($testdataPath . '/' . self::$className . '.sql');
		Yii::app()->db->createCommand($createTableSql)->execute();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		parent::tearDown();
	}

	/**
	 * This method is called after the last test of this test class is run.
	 *
	 * @since Method available since Release 3.4.0
	 */
	public static function tearDownAfterClass() {
		parent::tearDownAfterClass();
	}

	// =========================================================================
	// tools

	/**
	 * fast extract id from CAcriveRecord array
	 * @param CAcriveRecord[] $param active records array
	 * @return array ids
	 */
	private static function extractIds(array $param) {
		$result = array();
		foreach ($param as $entry) {
			$result[] = $entry->id;
		}
		return $result;
	}

	/**
	 * @param int $id
	 * @return SorterActiveRecordBehavior
	 */
	public static function loadModel($id) {
		$className = self::$className;
		return $className::model()->findByPk($id);
	}

	/**
	 * @param array $conditions
	 * @return SorterActiveRecordBehavior
	 */
	public static function loadModelByConditions(array $conditions) {
		$className = self::$className;
		return $className::model()->find($conditions);
	}

	/**
	 * @return SorterActiveRecordBehavior
	 */
	public static function createModel() {
		return new self::$className();
	}
	
	public static function quertyColumn($query) {
		return Yii::app()->db->createCommand($query)->queryColumn();
	}

	// =========================================================================
	// tests

	/**
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 */
	public function testSorterSwappWith() {
		$srcArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 64 && id <= 65 ORDER BY sort ASC');
		
		$model = $this->loadModel(64);
		$model->sorterSwappWith($this->loadModel(65));
		
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 64 && id <= 65 ORDER BY sort DESC');
		
		$this->assertEquals($srcArray, $dscArray);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveUp
	 */
	public function testSorterMoveUp() {
		$srcArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 1 && id <= 2 ORDER BY sort ASC');
		$model = $this->loadModel(2);
		$model->sorterMoveUp();
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 1 && id <= 2 ORDER BY sort DESC');
		$this->assertEquals($srcArray, $dscArray);
		// first position. Move ui is not working.
		$model->sorterMoveUp();
		$dsc2Array = self::quertyColumn('SELECT id FROM sortest WHERE id >= 1 && id <= 2 ORDER BY sort DESC');
		$this->assertEquals($dscArray, $dsc2Array);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveDown
	 */
	public function testSorterMoveDown() {
		$srcArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 126 && id <= 127 ORDER BY sort ASC');
		$model = $this->loadModel(126);
		$model->sorterMoveDown();
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 126 && id <= 127 ORDER BY sort DESC');
		$this->assertEquals($srcArray, $dscArray);
		// first position. Move up is not give attempt
		$model->sorterMoveDown();
		$dsc2Array = self::quertyColumn('SELECT id FROM sortest WHERE id >= 126 && id <= 127 ORDER BY sort DESC');
		$this->assertEquals($dscArray, $dsc2Array);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToBegin
	 * @covers SorterActiveRecordBehavior::normalizeSortFieldOnthefly
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @covers SorterActiveRecordBehavior::insertFirst
	 * @covers SorterActiveRecordBehavior::distributeNewFreeSortSpaceBitSize
	 * @covers SorterActiveRecordBehavior::moveToBeginFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 * @covers SorterActiveRecordBehavior::mathMaxSortField
	 */
	public function testSorterMoveToBegin() {
		$srcArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 1 && id <= 4 ORDER BY sort ASC');
		$model = $this->loadModel(5);
		$model->sorterMoveToBegin();
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 1 && id <= 5 ORDER BY sort ASC');
		$this->assertEquals(array_merge(array($model->id), $srcArray), $dscArray);
		// first position. Move up is not give attempt
		$model->sorterMoveToBegin();
		$dsc2Array = self::quertyColumn('SELECT id FROM sortest WHERE id >= 1 && id <= 5 ORDER BY sort ASC');
		$this->assertEquals($dscArray, $dsc2Array);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToEnd
	 * @covers SorterActiveRecordBehavior::normalizeSortFieldOnthefly
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @covers SorterActiveRecordBehavior::insertFirst
	 * @covers SorterActiveRecordBehavior::distributeNewFreeSortSpaceBitSize
	 * @covers SorterActiveRecordBehavior::moveToEndFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 * @covers SorterActiveRecordBehavior::mathMaxSortField
	 */
	public function testSorterMoveToEnd() {
		$srcArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 123 && id <= 127 ORDER BY sort ASC');
		$model = $this->loadModel(122);
		$model->sorterMoveToEnd();
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE id >= 122 && id <= 127 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray, array($model->id)), $dscArray);
		// first position. Move up is not give attempt
		$model->sorterMoveToEnd();
		$dsc2Array = self::quertyColumn('SELECT id FROM sortest WHERE id >= 122 && id <= 127 ORDER BY sort ASC');
		$this->assertEquals($dscArray, $dsc2Array);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveUpNumber
	 */
	public function testSorterMoveUpNumber() {
		$srcArray1 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1071972352 ORDER BY sort ASC');
		$srcArray2 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1072005120 && sort <= 1072300032 ORDER BY sort ASC');
		$model = $this->loadModel(21);
		$model->sorterMoveUpNumber(10);
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1072300032 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray1, array($model->id), $srcArray2), $dscArray);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveDownNumber
	 */
	public function testSorterMoveDownNumber() {
		$srcArray1 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1075150848 && sort <= 1075445760 ORDER BY sort ASC');
		$srcArray2 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1075478528 && sort <= 1075806208 ORDER BY sort ASC');
		$model = $this->loadModel(106);
		$model->sorterMoveDownNumber(10);
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1075150848 && sort <= 1075806208 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray1, array($model->id), $srcArray2), $dscArray);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveAfter
	 * @covers SorterActiveRecordBehavior::moveToEndFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 */
	public function testSorterMoveAfter() {
		$srcArray1 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1071972352 ORDER BY sort ASC');
		$srcArray2 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1072005120 && sort <= 1072300032 ORDER BY sort ASC');
		$model = $this->loadModel(21);
		$model->sorterMoveAfter(10);
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1072300032 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray1, array($model->id), $srcArray2), $dscArray);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveBefore
	 * @covers SorterActiveRecordBehavior::moveToBeginFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 */
	public function testSorterMoveBefore() {
		$srcArray1 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1071972352 ORDER BY sort ASC');
		$srcArray2 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1072005120 && sort <= 1072300032 ORDER BY sort ASC');
		$model = $this->loadModel(21);
		$model->sorterMoveBefore(11);
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1072300032 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray1, array($model->id), $srcArray2), $dscArray);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToPositionBefore
	 * @covers SorterActiveRecordBehavior::sorterMoveBefore
	 */
	public function testSorterMoveToPositionBefore() {
		$srcArray1 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1071972352 ORDER BY sort ASC');
		$srcArray2 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1072005120 && sort <= 1072300032 ORDER BY sort ASC');
		$model = $this->loadModel(21);
		$model->sorterMoveBefore(11);
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1072300032 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray1, array($model->id), $srcArray2), $dscArray);
	}
	
	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToPositionAfter
	 * @covers SorterActiveRecordBehavior::sorterMoveAfter
	 */
	public function testSorterMoveToPositionAfter() {
		$srcArray1 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1071972352 ORDER BY sort ASC');
		$srcArray2 = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1072005120 && sort <= 1072300032 ORDER BY sort ASC');
		$model = $this->loadModel(21);
		$model->sorterMoveAfter(10);
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE sort >= 1071677440 && sort <= 1072300032 ORDER BY sort ASC');
		$this->assertEquals(array_merge($srcArray1, array($model->id), $srcArray2), $dscArray);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterNormalizeSortFieldRegular
	 * @covers SorterActiveRecordBehavior::findNewFreeSortSpaceBitSizeByCount
	 * @covers SorterActiveRecordBehavior::mathMaxSortField
	 * @covers SorterActiveRecordBehavior::centralWeightFirstElement
	 * @covers SorterActiveRecordBehavior::distributeNewFreeSortSpaceBitSize
	 */
	public function testSorterNormalizeSortFieldRegular() {
		$model = $this->createModel();
		$model->name = 'insert';
		$model->sorterMoveToPositionAfter(20);
		$srcArray = self::quertyColumn('SELECT id FROM sortest WHERE 1 ORDER BY sort ASC');
		$this->createModel()->sorterNormalizeSortFieldRegular();
		$dscArray = self::quertyColumn('SELECT id FROM sortest WHERE 1 ORDER BY sort ASC');
		$this->assertEquals($srcArray, $dscArray);
	}

}
