<?php

/**
 * SorterActiveRecordBehaviorStdTest class file.
 *
 * @author		Krivtsov Artur (wartur) <gwartur@gmail.com> http://wartur.ru | Made in Russia
 * @copyright	Krivtsov Artur Â© 2014
 * @link		https://github.com/wartur/yii-sorter
 * @license		https://github.com/wartur/yii-sorter/blob/master/LICENSE
 */

/**
 * SorterActiveRecordBehaviorStdTest
 * 
 * This deep set of test for mathematical conform
 * 
 * Generated by PHPUnit_SkeletonGenerator on 2014-11-10 at 11:23:59.
 */
class SorterActiveRecordBehaviorMathTest extends CDbTestCase {

	/**
	 * @var string model name
	 */
	private static $className = 'SortestStd';

	// =========================================================================
	// fixturesschema

	/**
	 * This method is called before the first test of this test class is run.
	 *
	 * @since Method available since Release 3.4.0
	 */
	public static function setUpBeforeClass() {
		parent::setUpBeforeClass();

		// loading the database schema
		$testdataPath = Yii::getPathOfAlias('sorter.tests.env.testdata');
		$createTableSql = file_get_contents($testdataPath . '/' . self::$className . '.sql');
		Yii::app()->db->createCommand($createTableSql)->execute();

		// import models
		Yii::import('sorter.tests.env.models.*');
	}

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		// load fixture
		$testdataPath = Yii::getPathOfAlias('sorter.tests.env.testdata');
		$createTableSql = file_get_contents($testdataPath . '/' . self::$className . '.sql');
		Yii::app()->db->createCommand($createTableSql)->execute();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		parent::tearDown();
	}

	/**
	 * This method is called after the last test of this test class is run.
	 *
	 * @since Method available since Release 3.4.0
	 */
	public static function tearDownAfterClass() {
		parent::tearDownAfterClass();
	}

	// =========================================================================
	// tools

	/**
	 * fast extract id from CAcriveRecord array
	 * @param CAcriveRecord[] $param active records array
	 * @return array ids
	 */
	private static function extractIds(array $param) {
		$result = array();
		foreach ($param as $entry) {
			$result[] = $entry->id;
		}
		return $result;
	}

	/**
	 * @param int $id
	 * @return SorterActiveRecordBehavior
	 */
	public static function loadModel($id) {
		$className = self::$className;
		return $className::model()->findByPk($id);
	}

	/**
	 * @param array $conditions
	 * @return SorterActiveRecordBehavior
	 */
	public static function loadModelByConditions(array $conditions) {
		$className = self::$className;
		return $className::model()->find($conditions);
	}

	/**
	 * @return SorterActiveRecordBehavior
	 */
	public static function createModel() {
		return new self::$className();
	}

	// =========================================================================
	// tests

	/**
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 */
	public function testSorterSwappWith() {
		// swap himself =)
		$modelHimself1 = $this->loadModel(1);
		$modelHimself2 = $this->loadModel(1);
		$modelHimself1->sorterSwappWith($modelHimself2);
		$this->assertEquals(1071677440, $modelHimself1->owner->sort);
		$this->assertEquals(1071677440, $modelHimself2->owner->sort);

		// swap neighbor
		$modelNeighbor1 = $this->loadModel(1);
		$modelNeighbor2 = $this->loadModel(2);
		$modelNeighbor1->sorterSwappWith($modelNeighbor2);
		$this->assertEquals(1071710208, $modelNeighbor1->owner->sort);
		$this->assertEquals(1071677440, $modelNeighbor2->owner->sort);

		// swap neighbor redo
		$modelNeighbor2->sorterSwappWith($modelNeighbor1);
		$this->assertEquals(1071677440, $modelNeighbor1->owner->sort);
		$this->assertEquals(1071710208, $modelNeighbor2->owner->sort);

		// swap other
		$modelOther1 = $this->loadModel(1);
		$modelOther2 = $this->loadModel(3);
		$modelOther1->sorterSwappWith($modelOther2);
		$this->assertEquals(1071742976, $modelOther1->owner->sort);
		$this->assertEquals(1071677440, $modelOther2->owner->sort);
	}

	/**
	 * Test moveUp if is new record
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @expectedException SorterSaveErrorExeption
	 */
	public function testSorterSwappWithExceptionSaveFirst() {
		$model = $this->loadModel(1);
		$modelSwap = $this->loadModel(2);
		$model->owner->name = null;  // valudate error
		$model->sorterSwappWith($modelSwap);
	}

	/**
	 * Test moveUp if is new record
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @expectedException SorterSaveErrorExeption
	 */
	public function testSorterSwappWithExceptionSaveSecond() {
		$model = $this->loadModel(1);
		$modelSwap = $this->loadModel(2);
		$modelSwap->owner->name = null; // valudate error in swapped model
		$model->sorterSwappWith($modelSwap);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveUp
	 * @covers SorterActiveRecordBehavior::sorterMove
	 */
	public function testSorterMoveUp() {
		$model = $this->loadModel(1);
		$this->assertEquals(1071677440, $model->owner->sort);
		$model->sorterMoveUp();
		$this->assertEquals(1071677440, $model->owner->sort);

		$modelSwapTest = $this->loadModel(2);
		$this->assertEquals(1071710208, $modelSwapTest->owner->sort);
		$modelSwapTest->sorterMoveUp();
		$this->assertEquals(1071677440, $modelSwapTest->owner->sort);
	}

	/**
	 * Test moveUp if is new record
	 * @covers SorterActiveRecordBehavior::sorterMoveUp
	 * @covers SorterActiveRecordBehavior::sorterMove
	 * @expectedException SorterOperationExeption
	 * @expectedExceptionMessage sorterMoveUp sorterMoveDown not support when it is new record
	 */
	public function testSorterMoveUpException() {
		$model = $this->createModel();
		$model->sorterMoveUp();
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveDown
	 * @covers SorterActiveRecordBehavior::sorterMove
	 */
	public function testSorterMoveDown() {
		$model = $this->loadModel(127);
		$this->assertEquals(1075806208, $model->owner->sort);
		$model->sorterMoveDown();
		$this->assertEquals(1075806208, $model->owner->sort);

		$modelSwapTest = $this->loadModel(126);
		$this->assertEquals(1075773440, $modelSwapTest->owner->sort);
		$modelSwapTest->sorterMoveDown();
		$this->assertEquals(1075806208, $modelSwapTest->owner->sort);
	}

	/**
	 * Test moveDown if is new record
	 * @covers SorterActiveRecordBehavior::sorterMoveDown
	 * @covers SorterActiveRecordBehavior::sorterMove
	 * @expectedException SorterOperationExeption
	 * @expectedExceptionMessage sorterMoveUp sorterMoveDown not support when it is new record
	 */
	public function testSorterMoveDownException() {
		$model = $this->createModel();
		$model->sorterMoveDown();
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToBegin
	 * @covers SorterActiveRecordBehavior::sorterMoveTo
	 * @covers SorterActiveRecordBehavior::normalizeSortFieldOnthefly
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @covers SorterActiveRecordBehavior::insertFirst
	 * @covers SorterActiveRecordBehavior::distributeNewFreeSortSpaceBitSize
	 * @covers SorterActiveRecordBehavior::moveToBeginFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 * @covers SorterActiveRecordBehavior::mathMaxSortField
	 */
	public function testSorterMoveToBegin() {
		$model = $this->loadModel(64);
		$this->assertEquals(1073741824, $model->owner->sort);
		$model->sorterMoveToBegin();
		$this->assertEquals(1071644672, $model->owner->sort); // by 32768
		//
		// it's end of free space. devide on 2
		$insert = $this->createModel();
		$insert->owner->sort = 32;
		$insert->owner->name = 'end of space';
		$this->assertTrue($insert->save());

		$modelGoToEndOfSpace = $this->loadModel(65);
		$this->assertEquals(1073774592, $modelGoToEndOfSpace->owner->sort);
		$modelGoToEndOfSpace->sorterMoveToBegin();
		$this->assertEquals(16, $modelGoToEndOfSpace->owner->sort); // by 16

		$modelGoToEndOfSpace2 = $this->loadModel(66);
		$this->assertEquals(1073807360, $modelGoToEndOfSpace2->owner->sort);
		$modelGoToEndOfSpace2->sorterMoveToBegin();
		$this->assertEquals(8, $modelGoToEndOfSpace2->owner->sort); // by 8
		// it's end of space test and noirmalisation
		$insertToEnd = $this->createModel();
		$insertToEnd->owner->sort = 1;
		$insertToEnd->owner->name = 'out of space';
		$this->assertTrue($insertToEnd->save());

		$modelGoToOutOfSpace = $this->loadModel(67);
		$this->assertEquals(1073840128, $modelGoToOutOfSpace->owner->sort); // src
		$modelGoToOutOfSpace->sorterMoveToBegin();
		$this->assertEquals(1071480832, $modelGoToOutOfSpace->owner->sort); // after insert
		//
		// normalisation test
		$modelInsertToEnd = $this->loadModel($insertToEnd->id);
		$this->assertEquals(1071513600, $modelInsertToEnd->owner->sort); // +32768
		$model66 = $this->loadModel(66);
		$this->assertEquals(1071546368, $model66->owner->sort); // +32768
		$model65 = $this->loadModel(65);
		$this->assertEquals(1071579136, $model65->owner->sort); // +32768
		$modelInsert = $this->loadModel($insert->id);
		$this->assertEquals(1071611904, $modelInsert->owner->sort);  // +32768
		$model64 = $this->loadModel(64);
		$this->assertEquals(1071644672, $model64->owner->sort); // +32768
		$model1 = $this->loadModel(1);
		$this->assertEquals(1071677440, $model1->owner->sort); // +32768 and ......
		//
		// delete all
		SortestStd::model()->deleteAll();

		// it's insert first tests
		$modelOnlySet = $this->createModel();
		$modelOnlySet->owner->name = 'onlyset1';
		$modelOnlySet->sorterMoveToBegin();
		$this->assertTrue($modelOnlySet->save());
		$this->assertEquals(1073741824, $modelOnlySet->owner->sort);

		// it's only set tests
		$modelOnlySet2 = $this->createModel();
		$modelOnlySet2->name = 'onlyset2';
		$modelOnlySet2->sorterMoveToBegin(true);
		$this->assertEquals(1073709056, $modelOnlySet2->owner->sort); // HEADS UP!!! it's before save
		$this->assertTrue($modelOnlySet2->save());

		// it's test for swap optimisation in moveToBegin method
		$modelOnlySet->sorterMoveToBegin();
		$this->assertEquals(1073709056, $modelOnlySet->owner->sort);
		$modelOnlySet2After = $this->loadModel($modelOnlySet2->id);
		$this->assertEquals(1073741824, $modelOnlySet2After->owner->sort);

		// it's test for moveToBegin optimisation if this record is fitst
		$modelOnlySet->sorterMoveToBegin();
		$this->assertEquals(1073709056, $modelOnlySet->owner->sort);
		
		// switch off optimisation if it is only set
		$modelOnlySet2After->sorterMoveToBegin(true);
		$this->assertEquals(1073676288, $modelOnlySet2After->owner->sort);
	}

	/**
	 * Test insertFirst exception (private method)
	 * @covers SorterActiveRecordBehavior::insertFirst
	 * @expectedException SorterSaveErrorExeption
	 */
	public function testSorterInsertFirstException() {
		SortestStd::model()->deleteAll();

		// it's insert first tests
		$model = $this->createModel();
		$model->owner->name = null;
		$model->sorterMoveToBegin();
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToEnd
	 * @covers SorterActiveRecordBehavior::sorterMoveTo
	 * @covers SorterActiveRecordBehavior::normalizeSortFieldOnthefly
	 * @covers SorterActiveRecordBehavior::sorterSwappWith
	 * @covers SorterActiveRecordBehavior::insertFirst
	 * @covers SorterActiveRecordBehavior::distributeNewFreeSortSpaceBitSize
	 * @covers SorterActiveRecordBehavior::moveToEndFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 * @covers SorterActiveRecordBehavior::mathMaxSortField
	 */
	public function testSorterMoveToEnd() {
		$model = $this->loadModel(64);
		$this->assertEquals(1073741824, $model->owner->sort);
		$model->sorterMoveToEnd();
		$this->assertEquals(1075838976, $model->owner->sort); // by 32768
		//
		// it's end of free space. devide on 2
		$insert = $this->createModel();
		$insert->owner->sort = 2147483615;
		$insert->owner->name = 'end of space';
		$this->assertTrue($insert->save());

		$modelGoToEndOfSpace = $this->loadModel(65);
		$this->assertEquals(1073774592, $modelGoToEndOfSpace->owner->sort);
		$modelGoToEndOfSpace->sorterMoveToEnd();
		$this->assertEquals(2147483631, $modelGoToEndOfSpace->owner->sort); // by 16

		$modelGoToEndOfSpace2 = $this->loadModel(66);
		$this->assertEquals(1073807360, $modelGoToEndOfSpace2->owner->sort);
		$modelGoToEndOfSpace2->sorterMoveToEnd();
		$this->assertEquals(2147483639, $modelGoToEndOfSpace2->owner->sort); // by 8
		// it's end of space test and noirmalisation
		$insertToEnd = $this->createModel();
		$insertToEnd->owner->sort = 2147483646;
		$insertToEnd->owner->name = 'out of space';
		$this->assertTrue($insertToEnd->save());

		$modelGoToOutOfSpace = $this->loadModel(67);
		$this->assertEquals(1073840128, $modelGoToOutOfSpace->owner->sort); // src
		$modelGoToOutOfSpace->sorterMoveToEnd();
		$this->assertEquals(1076002816, $modelGoToOutOfSpace->owner->sort); // after insert
		//
		// normalisation test
		$modelInsertToEnd = $this->loadModel($insertToEnd->id);
		$this->assertEquals(1075970048, $modelInsertToEnd->owner->sort); // -32768
		$model66 = $this->loadModel(66);
		$this->assertEquals(1075937280, $model66->owner->sort); // -32768
		$model65 = $this->loadModel(65);
		$this->assertEquals(1075904512, $model65->owner->sort); // -32768
		$modelInsert = $this->loadModel($insert->id);
		$this->assertEquals(1075871744, $modelInsert->owner->sort);  // -32768
		$model64 = $this->loadModel(64);
		$this->assertEquals(1075838976, $model64->owner->sort); // -32768
		$model127 = $this->loadModel(127);
		$this->assertEquals(1075806208, $model127->owner->sort); // -32768 and ......
		//
		// delete all
		SortestStd::model()->deleteAll();

		// it's insert first tests
		$modelOnlySet = $this->createModel();
		$modelOnlySet->owner->name = 'onlyset1';
		$modelOnlySet->sorterMoveToEnd();
		$this->assertTrue($modelOnlySet->save());
		$this->assertEquals(1073741824, $modelOnlySet->owner->sort);

		// it's only set tests
		$modelOnlySet2 = $this->createModel();
		$modelOnlySet2->name = 'onlyset2';
		$modelOnlySet2->sorterMoveToEnd(true);
		$this->assertEquals(1073774592, $modelOnlySet2->owner->sort); // HEADS UP!!! it's before save
		$this->assertTrue($modelOnlySet2->save());

		// it's test for swap optimisation in moveToEnd method
		$modelOnlySet->sorterMoveToEnd();
		$this->assertEquals(1073774592, $modelOnlySet->owner->sort);
		$modelOnlySet2After = $this->loadModel($modelOnlySet2->id);
		$this->assertEquals(1073741824, $modelOnlySet2After->owner->sort);

		// it's test for moveToEnd optimisation if this record is last
		$modelOnlySet->sorterMoveToEnd();
		$this->assertEquals(1073774592, $modelOnlySet->owner->sort);

		// end mod2 round test
		$modelRoundEndTest = $this->createModel();
		$modelRoundEndTest->owner->name = 'round test';
		$modelRoundEndTest->owner->sort = 2147450880;
		$this->assertTrue($modelRoundEndTest->save());
		//
		$modelRoundEndTestModel2 = $this->createModel();
		$modelRoundEndTestModel2->sorterMoveToEnd(true); // only set
		$this->assertEquals(2147467263, $modelRoundEndTestModel2->owner->sort);
		
		// switch off optimisation if it is only set
		$modelOnlySet->sorterMoveToEnd(true);
		$this->assertEquals(2147450880, $modelRoundEndTest->owner->sort);
	}
	
	/**
	 * Test isNewRecord exception
	 * @covers SorterActiveRecordBehavior::sorterMoveNumberUp
	 * @covers SorterActiveRecordBehavior::sorterMoveNumber
	 * @expectedException SorterOperationExeption
	 * @expectedExceptionMessage sorterMoveUpNumber sorterMoveDownNumber not support when it is new record
	 */
	public function testSorterMoveNumberUpIsNewRecordException() {
		$model = $this->createModel();
		$model->sorterMoveNumberUp(5);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveNumberUp
	 * @covers SorterActiveRecordBehavior::sorterMoveNumber
	 */
	public function testSorterMoveNumberUp() {
		// std
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		$model64->sorterMoveNumberUp(5);
		$this->assertEquals(1073561600, $model64->owner->sort);
		
		// test move 1 (swap)
		$model90 = $this->loadModel(90);
		$this->assertEquals(1074593792, $model90->owner->sort);
		$model90->sorterMoveNumberUp(1);
		$this->assertEquals(1074561024, $model90->owner->sort);
		$model89 = $this->loadModel(89);
		$this->assertEquals(1074593792, $model89->owner->sort);
		
		// test move 0
		$model100 = $this->loadModel(100);
		$this->assertEquals(1074921472, $model100->owner->sort);
		$model100->sorterMoveNumberUp(0);
		$this->assertEquals(1074921472, $model100->owner->sort);
		
		// test move -2 (negative)
		$model3 = $this->loadModel(3);
		$this->assertEquals(1071742976, $model3->owner->sort);
		$model3->sorterMoveNumberUp(-2);
		$this->assertEquals(1071824896, $model3->owner->sort);
		
		// moveToBegin
		$model110 = $this->loadModel(110);
		$this->assertEquals(1075249152, $model110->owner->sort);
		$model110->sorterMoveNumberUp(1000);
		$this->assertEquals(1071644672, $model110->owner->sort);
		
		// fast moveToBegin
		$model10 = $this->loadModel(10);
		$this->assertEquals(1071972352, $model10->owner->sort);
		$model10->sorterMoveNumberUp(10);
		$this->assertEquals(1071611904, $model10->owner->sort);
	}
	
	/**
	 * Test isNewRecord exception
	 * @covers SorterActiveRecordBehavior::sorterMoveNumberDown
	 * @expectedException SorterOperationExeption
	 * @expectedExceptionMessage sorterMoveUpNumber sorterMoveDownNumber not support when it is new record
	 */
	public function testSorterMoveNumberDownIsNewRecordException() {
		$model = $this->createModel();
		$model->sorterMoveNumberDown(5);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveNumberDown
	 * @covers SorterActiveRecordBehavior::sorterMoveNumber
	 */
	public function testSorterMoveNumberDown() {
		// std
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		$model64->sorterMoveNumberDown(5);
		$this->assertEquals(1073922048, $model64->owner->sort);
		
		// test move 1 (swap)
		$model90 = $this->loadModel(90);
		$this->assertEquals(1074593792, $model90->owner->sort);
		$model90->sorterMoveNumberDown(1);
		$this->assertEquals(1074626560, $model90->owner->sort);
		$model89 = $this->loadModel(91);
		$this->assertEquals(1074593792, $model89->owner->sort);
		
		// test move 0
		$model100 = $this->loadModel(100);
		$this->assertEquals(1074921472, $model100->owner->sort);
		$model100->sorterMoveNumberDown(0);
		$this->assertEquals(1074921472, $model100->owner->sort);
		
		// test move -2 (negative)
		$model10 = $this->loadModel(10);
		$this->assertEquals(1071972352, $model10->owner->sort);
		$model10->sorterMoveNumberDown(-2);
		$this->assertEquals(1071890432, $model10->owner->sort);
		
		// moveToEnd
		$model110 = $this->loadModel(110);
		$this->assertEquals(1075249152, $model110->owner->sort);
		$model110->sorterMoveNumberDown(1000);
		$this->assertEquals(1075838976, $model110->owner->sort);
		
		// fast moveToEnd
		$model121 = $this->loadModel(121);
		$this->assertEquals(1075609600, $model121->owner->sort);
		$model121->sorterMoveNumberDown(7);
		$this->assertEquals(1075871744, $model121->owner->sort);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToModelAfter
	 * @covers SorterActiveRecordBehavior::sorterMoveToModel
	 * @covers SorterActiveRecordBehavior::moveToEndFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 */
	public function testSorterMoveToModelAfter() {
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		// swap
		$model64->sorterMoveToModelAfter(65);
		$this->assertEquals(1073774592, $model64->owner->sort);
		$model65 = $this->loadModel(65);
		$this->assertEquals(1073741824, $model65->owner->sort);
		// std move
		$model64->sorterMoveToModelAfter(70);
		$this->assertEquals(1073954816, $model64->owner->sort);
		// std move to end
		$model64->sorterMoveToModelAfter(127);
		$this->assertEquals(1075838976, $model64->owner->sort);
		// after own
		$model100 = $this->loadModel(100);
		$this->assertEquals(1074921472, $model100->owner->sort);
		$model100->sorterMoveToModelAfter(100);
		$this->assertEquals(1074921472, $model100->owner->sort);
		// swap from up
		$model10 = $this->loadModel(10);
		$this->assertEquals(1071972352, $model10->owner->sort);
		$model10->sorterMoveToModelAfter(8);
		$this->assertEquals(1071939584, $model10->owner->sort);
		$model9 = $this->loadModel(9);
		$this->assertEquals(1071972352, $model9->owner->sort);
	}
	
	public function testSorterMoveToModelAfterOnlyset() {
		$model = $this->createModel();
		$model->owner->name = 'onlysetInsert';
		$model->sorterMoveToModelAfter(3, true);
		$this->assertEquals(1071759360, $model->owner->sort);
		$this->assertTrue($model->save());
		
		$model2 = $this->createModel();
		$model2->owner->name = 'onlysetInsert2';
		$model2->sorterMoveToModelAfter(127, true);
		$this->assertEquals(1075838976, $model2->owner->sort);
		$this->assertTrue($model2->save());
	}
	
	public function testSorterMoveToModelBeforeOnlyset() {
		$model = $this->createModel();
		$model->owner->name = 'onlysetInsert';
		$model->sorterMoveToModelBefore(1, true);
		$this->assertEquals(1071644672, $model->owner->sort);
		$this->assertTrue($model->save());
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToModelAfter
	 * @covers SorterActiveRecordBehavior::sorterMoveToModel
	 * @expectedException SorterKeyNotFindExeption
	 * @expectedExceptionMessage pk(100500) not find in db
	 */
	public function testSorterMoveToModelAfterException() {
		$model64 = $this->loadModel(64);
		$model64->sorterMoveToModelAfter(100500);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToModelBefore
	 * @covers SorterActiveRecordBehavior::sorterMoveToModel
	 * @covers SorterActiveRecordBehavior::moveToBeginFast
	 * @covers SorterActiveRecordBehavior::moveBetween
	 */
	public function testSorterMoveToModelBefore() {
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		// swap
		$model64->sorterMoveToModelBefore(63);
		$this->assertEquals(1073709056, $model64->owner->sort);
		$model63 = $this->loadModel(63);
		$this->assertEquals(1073741824, $model63->owner->sort);
		// std move
		$model64->sorterMoveToModelBefore(10);
		$this->assertEquals(1071955968, $model64->owner->sort);
		// std move to begin
		$model64->sorterMoveToModelBefore(1);
		$this->assertEquals(1071644672, $model64->owner->sort);
		// before own
		$model100 = $this->loadModel(100);
		$this->assertEquals(1074921472, $model100->owner->sort);
		$model100->sorterMoveToModelBefore(100);
		$this->assertEquals(1074921472, $model100->owner->sort);
		// swap from down
		$model10 = $this->loadModel(10);
		$this->assertEquals(1071972352, $model10->owner->sort);
		$model10->sorterMoveToModelBefore(12);
		$this->assertEquals(1072005120, $model10->owner->sort);
		$model11 = $this->loadModel(11);
		$this->assertEquals(1071972352, $model11->owner->sort);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToModelBefore
	 * @covers SorterActiveRecordBehavior::sorterMoveToModel
	 * @expectedException SorterKeyNotFindExeption
	 * @expectedExceptionMessage pk(100500) not find in db
	 */
	public function testSorterMoveToModelBeforeException() {
		$model64 = $this->loadModel(64);
		$model64->sorterMoveToModelBefore(100500);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToPositionBefore
	 * @covers SorterActiveRecordBehavior::sorterMoveToPosition
	 * @covers SorterActiveRecordBehavior::sorterMoveToModel
	 */
	public function testSorterMoveToPositionBefore() {
		// Remove the following lines when you implement this test.
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		$model64->sorterMoveToPositionBefore(2);
		$this->assertEquals(1071693824, $model64->owner->sort);
		// move to minus
		$model65 = $this->loadModel(65);
		$this->assertEquals(1073774592, $model65->owner->sort);
		$model65->sorterMoveToPositionBefore(1);
		$this->assertEquals(1071644672, $model65->owner->sort);
		$model65->sorterMoveToPositionBefore(0);
		$this->assertEquals(1071644672, $model65->owner->sort);
		$model65->sorterMoveToPositionBefore(-1);
		$this->assertEquals(1071644672, $model65->owner->sort);
		// move to same position
		$model66 = $this->loadModel(66);
		$this->assertEquals(1073807360, $model66->owner->sort);
		$model66->sorterMoveToPositionBefore(66);	// positions was not change!!!
		$this->assertEquals(1073807360, $model66->owner->sort);
		// move to end
		$model66->sorterMoveToPositionBefore(100500);
		$this->assertEquals(1075838976, $model66->owner->sort);
	}
	
	/**
	 * @covers SorterActiveRecordBehavior::sorterMoveToPositionAfter
	 * @covers SorterActiveRecordBehavior::sorterMoveToPosition
	 * @covers SorterActiveRecordBehavior::sorterMoveToModel
	 */
	public function testSorterMoveToPositionAfter() {
		// Remove the following lines when you implement this test.
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		$model64->sorterMoveToPositionAfter(1);
		$this->assertEquals(1071693824, $model64->owner->sort);
		// move to minus
		$model65 = $this->loadModel(65);
		$this->assertEquals(1073774592, $model65->owner->sort);
		$model65->sorterMoveToPositionAfter(0);
		$this->assertEquals(1071644672, $model65->owner->sort);
		$model65->sorterMoveToPositionAfter(-1);
		$this->assertEquals(1071644672, $model65->owner->sort);
		$model65->sorterMoveToPositionAfter(-2);
		$this->assertEquals(1071644672, $model65->owner->sort);
		// move to same position
		$model66 = $this->loadModel(67);
		$this->assertEquals(1073840128, $model66->owner->sort);
		$model66->sorterMoveToPositionAfter(67);	// positions was not change!!!
		$this->assertEquals(1073840128, $model66->owner->sort);
		// move to end
		$model66->sorterMoveToPositionAfter(100500);
		$this->assertEquals(1075838976, $model66->owner->sort);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterChangeIdsOrderTo
	 * @expectedException CException
	 * @expectedExceptionMessage Not Implemented Exception
	 */
	public function testSorterChangeIdsOrderTo() {
		$model = $this->createModel();
		$model->sorterChangeIdsOrderTo(array());
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterInverseAll
	 * @expectedException CException
	 * @expectedExceptionMessage Not Implemented Exception
	 */
	public function testSorterInverseAll() {
		$model = $this->createModel();
		$model->sorterInverseAll();
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterNormalizeSortFieldRegular
	 * @covers SorterActiveRecordBehavior::findNewFreeSortSpaceBitSizeByCount
	 * @covers SorterActiveRecordBehavior::mathMaxSortField
	 * @covers SorterActiveRecordBehavior::centralWeightFirstElement
	 * @covers SorterActiveRecordBehavior::distributeNewFreeSortSpaceBitSize
	 */
	public function testSorterNormalizeSortFieldRegular() {
		$model63 = $this->loadModel(63);
		$this->assertEquals(1073709056, $model63->owner->sort);
		$model64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $model64->owner->sort);
		$model65 = $this->loadModel(65);
		$this->assertEquals(1073774592, $model65->owner->sort);
		
		$modelAfter = $this->createModel();
		$modelAfter->name = 'after';
		$modelAfter->sorterMoveToModelAfter(64);
		$this->assertEquals(1073758208, $modelAfter->owner->sort);
		
		$modelBefore = $this->createModel();
		$modelBefore->name = 'before';
		$modelBefore->sorterMoveToModelBefore(64);
		$this->assertEquals(1073725440, $modelBefore->owner->sort);
		
		$model = $this->createModel();
		$model->sorterNormalizeSortFieldRegular();
		
		$norModel64 = $this->loadModel(64);
		$this->assertEquals(1073741824, $norModel64->owner->sort);
		$norModelAfter = $this->loadModel($modelAfter->owner->id);
		$this->assertEquals(1073774592, $norModelAfter->owner->sort);
		$norModelBefore = $this->loadModel($modelBefore->owner->id);
		$this->assertEquals(1073709056, $norModelBefore->owner->sort);
		$norModel63 = $this->loadModel(63);
		$this->assertEquals(1073676288, $norModel63->owner->sort);
		$norModel65 = $this->loadModel(65);
		$this->assertEquals(1073807360, $norModel65->owner->sort);
	}

	/**
	 * @covers SorterActiveRecordBehavior::sorterSetNextInsertSortValue
	 */
	public function testSorterSetNextInsertSortValue() {
		$model = $this->createModel();
		$model->owner->name = 'newModel';
		$model->sorterSetNextInsertSortValue();
		$this->assertEquals(1075838976, $model->owner->sort);
	}

	/**
	 * @covers SorterActiveRecordBehavior::beforeValidate
	 * @covers SorterActiveRecordBehavior::sorterSetNextInsertSortValue
	 */
	public function testBeforeValidate() {
		$model = $this->createModel();
		$model->owner->name = 'newModel';
		$this->assertTrue($model->save());
		$this->assertEquals(1075838976, $model->owner->sort);
	}

}
